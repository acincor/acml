// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.6.8 clang-1600.0.23.1)
// swift-module-flags: -target arm64-apple-ios18.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name MLModel
@_exported import MLModel
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public func loadDeploy() throws -> MLModel.Brain
public func add(_ messages: [[[Any]]], _ n: Swift.Int, _ clear: Swift.Bool) throws -> MLModel.Brain
public func rand(_ nerveTissuesCount: Swift.Int, _ messagesCount: Swift.Int, _ range: Swift.Int, _ neuronCellsCount: Swift.Int, _ n: Swift.Int, _ clear: Swift.Bool) throws -> MLModel.Brain
@_hasMissingDesignatedInitializers public class Queue {
  public func addOperation(_ op: MLModel.QueueTask)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class QueueTask {
  public var closure: (() -> ([[Any]]))
  @objc deinit
}
@_hasMissingDesignatedInitializers open class DeployDAL {
  public class func clearDataCache()
  public class func removeCache(_ statusId: Swift.Int)
  public static func collectCellBody() throws -> MLModel.CellBodyModel
  public static var loadNewId: Swift.Int {
    get
  }
  public static var loadNewCellBody: MLModel.CellBodyModel? {
    get
  }
  public static var expiresDates: [Swift.Int : Foundation.Date]
  public class func saveSingleCache(array dict: [Swift.String : Any])
  public class func saveCache(array data: [[Swift.String : Any]])
  public class func loadStatus() throws -> [MLModel.NerveTissue]
  @objc deinit
}
@objc public class Deploy : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc public var nerveEnding: MLModel.NerveEndingModel?
  @objc public var dendrite: MLModel.DendriteModel?
  public init(dict: [Swift.String : Any])
  public static func == (lhs: MLModel.Deploy, rhs: MLModel.Deploy) -> Swift.Bool
  @objc required public init(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with encoder: Foundation.NSCoder)
  @objc override dynamic public func setValue(_ value: Any?, forUndefinedKey key: Swift.String)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public class DNAModel : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc required public init?(coder: Foundation.NSCoder)
  public init(rnaId: [Swift.Int]) throws
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  public static func == (lhs: MLModel.DNAModel, rhs: MLModel.DNAModel) -> Swift.Bool
  @objc deinit
}
@objc public class NucleusModel : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc required public init?(coder: Foundation.NSCoder)
  public init(dnas: [MLModel.DNAModel]) throws
  public static func == (lhs: MLModel.NucleusModel, rhs: MLModel.NucleusModel) -> Swift.Bool
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public class CellBodyModel : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc required public init?(coder: Foundation.NSCoder)
  public init(nucleus: MLModel.NucleusModel)
  public static func == (lhs: MLModel.CellBodyModel, rhs: MLModel.CellBodyModel) -> Swift.Bool
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public class DendriteModel : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc required public init(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with encoder: Foundation.NSCoder)
  @objc public var deploy: MLModel.Deploy?
  public init(percent: Swift.Double = 1.00, deploy: MLModel.Deploy? = nil)
  public static func == (lhs: MLModel.DendriteModel, rhs: MLModel.DendriteModel) -> Swift.Bool
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public class NerveEndingModel : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc required public init(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with encoder: Foundation.NSCoder)
  @objc public var deploy: MLModel.Deploy?
  public init(percent: Swift.Double = 1.00, deploy: MLModel.Deploy? = nil)
  public static func == (lhs: MLModel.NerveEndingModel, rhs: MLModel.NerveEndingModel) -> Swift.Bool
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public class NeuronCell : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc required public init?(coder: Foundation.NSCoder)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  public var dendrites: [MLModel.DendriteModel]
  public var nerveEndings: [MLModel.NerveEndingModel]
  public func build()
  public static func == (lhs: MLModel.NeuronCell, rhs: MLModel.NeuronCell) -> Swift.Bool
  public init(cellBody: MLModel.CellBodyModel, dendrites: [MLModel.DendriteModel], nerveEndings: [MLModel.NerveEndingModel], msg: [Any])
  @objc deinit
}
@objc public class NerveTissue : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc required public init?(coder: Foundation.NSCoder)
  public init(neuronCells: [MLModel.NeuronCell])
  public func build()
  public var msgs: [[Any]] {
    get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
public class Brain : Swift.CustomStringConvertible {
  public init(nerveTissues: [MLModel.NerveTissue])
  public func build(_ finished: @escaping (([[[Any]]]) -> ()))
  public var msgs: [[[Any]]] {
    get
  }
  public var description: Swift.String {
    get
  }
  @objc deinit
}
